import React from "react";
import {
  StyleSheet,
  View,
  Text,
  Image,
  StatusBar,
  Dimensions,
  ImageBackground,
  Animated,
  TouchableWithoutFeedback
} from "react-native";
import { LinearGradient } from "expo";
import AppIntroSlider from "react-native-app-intro-slider";
import { Icon } from "native-base";
import styled from "styled-components/native";
import { Svg } from "expo";
const { width, height } = Dimensions.get("window");

const ImageStyle = {
  width: 120,
  height: 120,
  resizeMode: "contain",
  alignItems: "center",
  justifyContent: "center",
  position: "absolute"
};

const ImageStyle2 = {
  top: -80,
  width: 120,
  height: 120,
  resizeMode: "contain",
  alignItems: "center",
  justifyContent: "center",
  position: "absolute",
  zIndex: -99
};

const Wheel = () => {
  return (
    <TouchableWithoutFeedback>
      <Animated.Image
        source={require("../assets/images/astro/knob.png")}
        style={ImageStyle}
      />
    </TouchableWithoutFeedback>
  );
};

const FloatCard = props => {
  const { rotateIndex, selfIndex, bgColor, position, floatCard } = { ...props };

  return (
    <Animated.View
      style={[
        {
          position: "absolute",
          height: 200,
          width: 200,
          borderRadius: 10,
          backgroundColor: bgColor,
          shadowOffset: { width: 2, height: 2 },
          shadowOpacity: 0.2,
          shadowRadius: 3,
          left: "25%",
          zIndex: -999
        },
        position
      ]}
    />
  );
};
//FIXME   这个地方想法有问题, 把图片拿出来,点击的时候动画旋转图片, AstroScreen4里实现
//FIXME   这里使用旋转图片的方法
export default class DemoScreen extends React.Component {
  state = {
    animation: new Animated.Value(0),
    position: new Animated.Value(-200),
    rotateIndex: 0,
    rotateDeg: "90deg"
  };

  //NOTE 这个地方++的位置,如果在后面,第一次动画不会显示,++在前面就没有什么问题了

  rotateWheel = () => {
    Animated.timing(this.state.animation, {
      toValue: ++this.state.rotateIndex,
      duration: 500
    }).start(() => {
      if (this.state.rotateIndex > 3) {
        this.setState({ rotateIndex: 0 });
        this.state.animation.setValue(0);
      }
      if (this.state.rotateIndex == 3) {
        this.floatCard();
      } else {
        this.hiddenCard();
      }
    });
  };

  floatCard = () => {
    Animated.timing(this.state.position, {
      toValue: 400,
      duration: 800
    }).start();
  };

  hiddenCard = () => {
    Animated.timing(this.state.position, {
      toValue: -200,
      duration: 900
    }).start();
  };
  render() {
    const rotateStyle = {
      transform: [
        {
          rotate: this.state.animation.interpolate({
            inputRange: [0, 1, 2, 3, 4],
            outputRange: ["0deg", "90deg", "180deg", "270deg", "360deg"]
          })
        }
      ]
    };

    const position = {
      bottom: this.state.position
    };
    return (
      <View style={styles.container}>
        <View
          style={{
            marginTop: 500,
            alignItems: "center",
            justifyContent: "center"
          }}
        >
          <TouchableWithoutFeedback onPress={this.rotateWheel}>
            <Animated.Image
              source={require("../assets/images/astro/knob.png")}
              style={[ImageStyle, rotateStyle]}
            />
          </TouchableWithoutFeedback>
          <Image
            source={require("../assets/images/astro/purplecircle.png")}
            style={ImageStyle2}
          />
        </View>

        {/* <Animated.View
          style={[
            {
              position: "absolute",
              height: 200,
              width: 200,
              borderRadius: 10,
              backgroundColor: "rgba(43, 196, 248, 1.000)",
              shadowOffset: { width: 2, height: 2 },
              shadowOpacity: 0.2,
              shadowRadius: 3,
              left: "25%",
              zIndex: -999
            },
            CardPosition
          ]}
        /> */}
        <FloatCard
          position={position}
          bgColor={"rgba(22, 157, 218, 1.000)"}
          selfIndex={1}
          rotateIndex={this.state.rotateIndex}
          floatCard={this.floatCard}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center"
  }
});

//FIXME  后面的 svg代码现在不能使用, 紫色的弧形可以考虑使用circular-progress-bar来实现,
//在另一个app中

// const SvgWheel = () => {
//   return (
//     <Svg width="350px" height="350px" viewBox="0 0 350 350" version="1.1">
//       <Svg.Defs>
//         <Svg.Circle id="path-1" cx="175" cy="175" r="175" />
//         <Svg.Path
//           d="M296.999995,61.5075655 C297.01772,61.5252892 247.51774,111.022767 148.500057,210 L0,61.5076841 C82.0143699,-20.5025416 214.985744,-20.5025416 296.999995,61.5075655 Z"
//           id="path-3"
//         />
//       </Svg.Defs>
//       <Svg.G
//         id="Atro-Freebie"
//         stroke="none"
//         stroke-width="1"
//         fill="none"
//         fill-rule="evenodd"
//       >
//         <Svg.G
//           id="⟶-[Navigation]-View-#10"
//           transform="translate(-200.000000, -1194.000000)"
//         >
//           <Svg.G id="dial-menu" transform="translate(200.000000, 1158.000000)">
//             <Svg.G id="items" transform="translate(0.000000, 36.000000)">
//               <Svg.Mask id="mask-2" fill="white">
//                 <Svg.Use href="#path-1" />
//               </Svg.Mask>
//               <Svg.Use id="bg" fill="#1C162E" href="#path-1" />
//               <Svg.G
//                 id="Misc/📏Divider/Light"
//                 mask="url(#mask-2)"
//                 fill="#FFFFFF"
//                 opacity="0.0814311609"
//               >
//                 <Svg.G
//                   transform="translate(175.000000, 175.000000) rotate(-315.000000) translate(-175.000000, -175.000000) translate(25.000000, 174.000000)"
//                   id="divider"
//                 >
//                   <Svg.Rect x="0" y="0" width="300" height="2" />
//                 </Svg.G>
//               </Svg.G>
//               <Svg.G
//                 id="Misc/📏Divider/Light-Copy"
//                 mask="url(#mask-2)"
//                 fill="#FFFFFF"
//                 opacity="0.0814311609"
//               >
//                 <Svg.G
//                   transform="translate(175.000000, 175.000000) scale(-1, 1) rotate(-315.000000) translate(-175.000000, -175.000000) translate(25.000000, 174.000000)"
//                   id="divider"
//                 >
//                   <Svg.Rect x="0" y="0" width="300" height="2" />
//                 </Svg.G>
//               </Svg.G>
//               <Svg.G id="slice" mask="url(#mask-2)">
//                 <Svg.G transform="translate(27.000000, -32.000000)">
//                   <Svg.Mask id="mask-4" fill="white">
//                     <Svg.Use href="#path-3" />
//                   </Svg.Mask>
//                   <Svg.Use
//                     id="bg"
//                     stroke="none"
//                     fill="#1C162E"
//                     fill-rule="evenodd"
//                     href="#path-3"
//                   />
//                   <Svg.G
//                     id="🖼-Icon/M-placeholder"
//                     stroke="none"
//                     stroke-width="1"
//                     fill="none"
//                     fill-rule="evenodd"
//                     mask="url(#mask-4)"
//                   >
//                     <Svg.G
//                       transform="translate(125.000000, 73.000000)"
//                       id="Broom"
//                     >
//                       <Svg.G transform="translate(1632.000000, 3384.000000)">
//                         <Svg.Rect
//                           id="bounds"
//                           fill="#CDEBFF"
//                           opacity="0"
//                           x="0"
//                           y="0"
//                           width="48"
//                           height="48"
//                         />
//                         <Svg.Path
//                           d="M42.8771976,28.8753873 C43.1692172,28.3130997 42.9224085,27.6824701 42.3278952,27.4568825 C42.3278952,27.4568825 35.493436,25.1283576 31.7419566,21.3763239 C31.7419566,21.3763238 21.3739662,31.7458464 21.3739662,31.7458464 C25.2619628,35.6344175 27.4633677,42.3324128 27.4633677,42.3324128 C27.679086,42.928409 28.3231454,43.1666038 28.8775605,42.8771508 L30.0101242,42.2858537 C30.575443,41.990708 30.8505056,41.2731692 30.6252224,40.685088 L29.6015668,38.0129289 C29.3759574,37.4239961 29.5796662,37.2822597 30.0550258,37.6950168 L32.2149934,39.5705277 C32.6910413,39.9838825 33.4731102,39.9802582 33.9534361,39.569578 L35.2307498,38.4774706 C35.7148172,38.0635913 35.8104472,37.2942501 35.4484194,36.7650544 L32.9838258,33.1624237 C32.6199739,32.6305617 32.7584285,32.4959931 33.2871229,32.8577848 L36.8863407,35.3207714 C37.4176989,35.684386 38.1823107,35.58786 38.5950069,35.1041689 L39.5029796,34.0400005 C39.9152917,33.5567597 39.891977,32.7967566 39.4507309,32.342307 L36.0765417,28.8671515 C35.6353734,28.412782 35.7461637,28.2545978 36.3242267,28.5139393 L40.7446479,30.4971119 C41.3226089,30.7564076 42.0294091,30.5078155 42.319887,29.9484964 L42.8771976,28.8753873 L42.8771976,28.8753873 L42.8771976,28.8753873 L42.8771976,28.8753873 Z M16.8254647,19.4195308 L5.33298521,7.92535299 C4.88728953,7.47959144 4.88638795,6.75777089 5.34610603,6.29798487 L6.29785515,5.3460951 C6.75079726,4.89308606 7.47281458,4.88073728 7.92498282,5.33297234 L19.4174623,16.8271501 C19.7822492,17.191991 20.4679569,17.3184871 20.9232513,17.1519812 C20.9232513,17.1519812 25.2619626,14.8953722 29.149959,18.7839432 C29.149959,18.7839432 18.7819686,29.1534658 18.7819686,29.1534658 C14.8939722,25.2648948 17.1502477,20.9255423 17.1502477,20.9255423 C17.3356619,20.4586359 17.1909321,19.7850522 16.8254647,19.4195308 L16.8254647,19.4195308 L16.8254647,19.4195308 L16.8254647,19.4195308 Z"
//                           fill="#FFFFFF"
//                         />
//                       </Svg.G>
//                     </Svg.G>
//                   </Svg.G>
//                 </Svg.G>
//               </Svg.G>
//               <Svg.G id="slice-copy-4" mask="url(#mask-2)">
//                 <Svg.G
//                   transform="translate(281.000000, 176.500000) rotate(-270.000000) translate(-281.000000, -176.500000) translate(132.500000, 71.500000)"
//                   id="🖼-Icon/M-placeholder"
//                 >
//                   <Svg.G transform="translate(149.000000, 97.000000) scale(1, -1) translate(-149.000000, -97.000000) translate(125.000000, 73.000000)">
//                     <Svg.G
//                       id="Bell"
//                       transform="translate(1632.000000, 3384.000000)"
//                     >
//                       <Svg.Rect
//                         id="bounds"
//                         fill="#CDEBFF"
//                         opacity="0"
//                         x="0"
//                         y="0"
//                         width="48"
//                         height="48"
//                       />
//                       <Svg.Path
//                         d="M26.0255233,9.77668121 C26.0511418,9.63745533 26.0645329,9.49393145 26.0645329,9.34728033 C26.0645329,8.05158159 25.0191996,7 23.7311996,7 C22.4431996,7 21.3978663,8.05158159 21.3978663,9.34728033 C21.3978663,9.53853279 21.4206414,9.72446656 21.4636103,9.90248488 C17.52207,10.9906944 14.6323185,14.5524509 14.6323185,18.7790795 C14.6323185,32.4607364 10,32.2272033 10,33.8358159 C10,35.7025439 16.2669789,37.2158996 24,37.2158996 C31.7330211,37.2158996 38,35.7025439 38,33.8358159 C38,32.2272033 33.3676815,32.7050243 33.3676815,18.7790795 C33.3676815,14.3718532 30.2257044,10.6875308 26.0255233,9.77668121 L26.0255233,9.77668121 L26.0255233,9.77668121 L26.0255233,9.77668121 Z M27.5461869,38.5510212 C27.2369866,39.9516537 25.993942,41 24.5089774,41 C23.043498,41 21.8136315,39.9789854 21.4844203,38.6059738 C22.3004815,38.6417148 23.1412001,38.6603798 24,38.6603798 C25.2252305,38.6603798 26.413658,38.622389 27.5461869,38.5510212 L27.5461869,38.5510212 L27.5461869,38.5510212 L27.5461869,38.5510212 Z"
//                         fill="#FFFFFF"
//                       />
//                     </Svg.G>
//                   </Svg.G>
//                 </Svg.G>
//               </Svg.G>
//               <Svg.G id="slice-copy-5" mask="url(#mask-2)">
//                 <Svg.G
//                   transform="translate(176.000000, 280.500000) rotate(-180.000000) translate(-176.000000, -280.500000) translate(27.500000, 175.500000)"
//                   id="🖼-Icon/M-placeholder"
//                 >
//                   <Svg.G transform="translate(125.000000, 73.000000)">
//                     <Svg.G
//                       id="Headphones"
//                       transform="translate(1632.000000, 3384.000000)"
//                     >
//                       <Svg.Rect
//                         id="bounds"
//                         fill="#CDEBFF"
//                         opacity="0"
//                         x="0"
//                         y="0"
//                         width="48"
//                         height="48"
//                       />
//                       <Svg.Path
//                         d="M43.9508405,28.0536659 L42.5602169,23.6619153 C42.5413396,23.6048247 42.51617,23.547734 42.4889028,23.4927579 C42.6168486,22.549705 42.6839677,21.4797841 42.4553433,20.8560159 C42.3966141,20.6974308 42.3127152,20.5409602 42.2078416,20.4014053 C42.071506,17.8302119 40.8088281,7.06333948 29.1175216,4.2447533 C27.1689705,3.73728091 25.1050585,3.48777366 22.9908072,3.50046047 C22.7831575,3.50680387 17.9044386,3.6717324 13.8437337,6.14143132 C10.2046205,8.15017617 5.8544645,12.2374433 5.5964755,20.3125976 C5.50838169,20.4373512 5.4412626,20.5684483 5.39302076,20.7016598 C5.19585843,21.2450781 5.19376096,22.1923599 5.38882581,23.516017 L4.05063896,27.7428391 C3.9961047,27.9119965 3.98561734,28.0917263 4.01917688,28.2651127 C4.61066386,31.3374351 5.76007828,37.505339 5.87963416,38.805737 C5.93836336,40.5649746 8.62522444,43.1594271 9.45162823,43.9121778 C9.46001812,43.9206357 9.47050548,43.9290936 9.47679789,43.9375514 C9.47889536,43.9375514 9.47889536,43.9396659 9.47889536,43.9396659 L9.48099283,43.9396659 L9.48099283,43.9417804 L9.48309031,43.9417804 L9.48309031,43.9438948 L9.48518778,43.9438948 C9.48518778,43.9438948 9.48518778,43.9460093 9.48728525,43.9460093 C9.61732849,44.0538472 9.76834644,44.1278536 9.92985175,44.1637995 L9.93194922,44.1637995 C9.97180118,44.1722574 10.0116531,44.1786008 10.0536026,44.1828298 L10.0557,44.1849442 L10.0577975,44.1849442 C10.1060394,44.1870587 10.1563787,44.1934021 10.206718,44.1870587 C10.5863603,44.1722574 11.8196736,44.0644195 12.4782797,43.3222412 C12.568471,43.2207467 12.6460774,43.1086799 12.7069041,42.9902697 C13.2753189,42.9733539 13.9800693,42.9395224 14.4771701,42.9141488 C15.6895087,42.8570582 16.3648945,42.3072964 16.7172697,41.8548002 C17.5604533,40.7721925 17.3150491,39.3406974 17.2814896,39.1799979 C17.2814896,39.1799979 14.5862386,25.412695 14.2611305,23.7887834 C14.0702606,22.847845 13.5458927,22.3763186 13.1389832,22.147956 C12.1175146,21.5749351 10.9156634,21.9935999 10.7709378,22.048576 L8.92096793,22.7632663 C8.9230654,22.1712152 8.9230654,21.4057777 8.91887046,20.9384802 C8.91257804,20.6657138 8.84965389,20.4119776 8.73009801,20.1899584 C9.1223252,16.5636454 10.4961691,13.6689383 12.8180701,11.5671569 C13.3718026,11.8187786 14.1541595,12.0323399 15.1504585,11.9054718 C15.7922848,11.825122 16.3837718,11.5671569 17.0717424,11.2690168 C18.4183192,10.6811947 20.2619967,9.87558227 23.817211,9.87558227 C27.0389273,9.87558227 29.1405938,10.7974904 30.675943,11.4698913 C31.7687257,11.9519901 32.5678623,12.3029918 33.3837788,12.1338344 C34.065457,11.992165 34.6737238,11.888556 35.0932181,11.8230075 C37.9457794,14.5781597 38.8413998,17.9951404 39.1203635,19.8135831 C39.1392407,19.9594814 39.158118,20.1074942 39.1728003,20.2555069 C39.0196849,20.4986708 38.9336885,20.7862385 38.9315911,21.1034087 C38.9273961,21.587622 38.9273961,22.4122646 38.9294936,23.019117 L37.2179568,22.3572884 C37.0837186,22.3044267 35.8839649,21.8878764 34.8624962,22.4587829 C34.4555867,22.6871454 33.9291214,23.1586719 33.7382515,24.1017247 C33.4131434,25.7256363 30.7157949,39.4908247 30.7136975,39.4929392 C30.6843329,39.6515243 30.4410262,41.0830193 31.2821123,42.165627 C31.6344875,42.6181232 32.3098733,43.167885 33.5201144,43.2270901 C34.105309,43.2545782 34.7639151,43.2862952 35.2903804,43.303211 C35.3512071,43.4216212 35.430911,43.5315735 35.5190048,43.633068 C36.1776109,44.3752464 37.4109242,44.4851987 37.7905665,44.4978855 C37.8073463,44.5 37.8262235,44.5 37.8430033,44.5 C37.90383,44.5 37.9667541,44.4936566 38.0275808,44.4851987 L38.0317758,44.4851987 L38.0338732,44.4830843 L38.0359707,44.4830843 L38.0380682,44.4830843 L38.0401656,44.4830843 L38.0422631,44.4830843 L38.0443606,44.4830843 C38.0443606,44.4809698 38.0464581,44.4809698 38.0464581,44.4809698 L38.050653,44.4809698 L38.050653,44.4809698 L38.0527505,44.4809698 C38.0527505,44.4788553 38.0548479,44.4788553 38.0548479,44.4788553 L38.0569454,44.4788553 L38.0590429,44.4788553 L38.0611404,44.4788553 L38.0632378,44.4788553 C38.0632378,44.4767408 38.0632378,44.4767408 38.0653353,44.4767408 L38.0674328,44.4767408 L38.0695302,44.4767408 L38.0716277,44.4767408 L38.0737252,44.4746264 L38.0758227,44.4746264 L38.0779201,44.4746264 L38.0800176,44.4746264 C38.0800176,44.4746264 38.0821151,44.4746264 38.0821151,44.4725119 L38.08631,44.4725119 L38.0884075,44.4725119 C38.090505,44.4725119 38.090505,44.4703974 38.0926024,44.4703974 C38.2541077,44.4302225 38.4051257,44.3519872 38.5351689,44.2356915 C38.5477538,44.2251191 38.5603386,44.2166613 38.5708259,44.2060889 L38.6001906,44.1743719 C39.8691608,42.8549437 42.0043869,40.4550222 42.1176504,39.1778834 C42.1847695,38.4103314 43.2691623,32.4136994 43.9823026,28.5695961 C44.0137647,28.3983242 44.0032773,28.2207089 43.9508405,28.0536659"
//                         fill="#FFFFFF"
//                       />
//                     </Svg.G>
//                   </Svg.G>
//                 </Svg.G>
//               </Svg.G>
//               <Svg.G id="slice-copy-6" mask="url(#mask-2)">
//                 <Svg.G
//                   transform="translate(71.500000, 177.000000) rotate(-90.000000) translate(-71.500000, -177.000000) translate(-77.000000, 72.000000)"
//                   id="🖼-Icon/M-placeholder"
//                 >
//                   <Svg.G transform="translate(125.000000, 73.000000)">
//                     <Svg.G
//                       id="Camera"
//                       transform="translate(1632.000000, 3384.000000)"
//                     >
//                       <Svg.Rect
//                         id="bounds"
//                         fill="#CDEBFF"
//                         opacity="0"
//                         x="0"
//                         y="0"
//                         width="48"
//                         height="48"
//                       />
//                       <Svg.Path
//                         d="M30.3076923,36.1519943 C24.6479878,36.1519943 20.0576923,31.6405022 20.0576923,26.0766102 C20.0576923,20.5134865 24.6488041,16.0019943 30.3076923,16.0019943 C35.9673968,16.0019943 40.556876,20.5134865 40.5576923,26.0766102 C40.5576923,31.6405022 35.9673968,36.1519943 30.3076923,36.1519943 L30.3076923,36.1519943 L30.3076923,36.1519943 L30.3076923,36.1519943 L30.3076923,36.1519943 Z M41.0834014,11.9446195 L39.746152,11.9446195 C39.746152,11.1843135 39.1338583,10.854191 38.3795126,10.854191 L37.0120567,10.854191 C36.2577109,10.854191 35.6462336,11.1843135 35.6462336,11.9446195 L20.524213,11.9446195 C19.1575735,11.9446195 19.1575735,8.5 17.7909341,8.5 L10.2744171,8.5 C8.90777762,8.5 8.90777762,11.9446195 7.54113817,11.9446195 L6.91659863,11.9446195 C5.02991776,11.9446195 3.5,13.4872922 3.5,15.389239 L3.5,36.0553802 C3.5,37.9581149 5.02991776,39.5007876 6.91659863,39.4999997 L41.0834014,39.4999997 C42.9700822,39.4999997 44.5,37.9581149 44.5,36.0553802 L44.5,15.389239 C44.5,13.4872922 42.9700822,11.9446195 41.0834014,11.9446195 L41.0834014,11.9446195 L41.0834014,11.9446195 L41.0834014,11.9446195 L41.0834014,11.9446195 Z M30.3076923,33.8269943 C25.9540734,33.8269943 22.4230769,30.3566158 22.4230769,26.0766989 C22.4230769,21.7973729 25.9547014,18.3269943 30.3076923,18.3269943 C34.6613112,18.3269943 38.1916797,21.7973729 38.1923077,26.0766989 C38.1923077,30.3566158 34.6613112,33.8269943 30.3076923,33.8269943 L30.3076923,33.8269943 L30.3076923,33.8269943 L30.3076923,33.8269943 L30.3076923,33.8269943 Z"
//                         fill="#FFFFFF"
//                       />
//                     </Svg.G>
//                   </Svg.G>
//                 </Svg.G>
//               </Svg.G>
//             </Svg.G>
//           </Svg.G>
//         </Svg.G>
//       </Svg.G>
//     </Svg>
//   );
// };

// const PurpleCircle = () => {
//   return (
//     <Svg width="322px" height="126px" viewBox="0 0 322 126">
//       <Svg.Defs>
//         <Svg.Path
//           d="M48.839459,83.9845745 C91.7642609,41.0597726 151.055399,24.4762903 206.626052,34.2341277 C241.6112,40.377287 275.121742,56.9607692 302.145508,83.9845745"
//           id="path-1"
//         />
//       </Svg.Defs>

//       <Svg.Use stroke="#A573FF" stroke-width="10" href="#path-1" />
//     </Svg>
//   );
// };
